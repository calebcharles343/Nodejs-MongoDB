Jobee API is a RESTful API.

STEPS TAKEN:
1, create 'jobbee-API' project folder.

2, npm init -y 'jobbee-API' folder to create the necessary 'node-modules' 
   folder and and 'package.json' file.

3, create 'app.js' file using express http server Framework.

4, create a 'config' folder 

5, Inside 'config' folder  create a 'config.env' or '.env' file where 
   configuration options and settings for an application 
   e.g. PORT = 3000, NODE_ENV = development.

6, Only for 'config.env' file setup file variebles, 
  ('.env' file variebles are imported automatically) 
  - npm i dotenv --save
  - const dotenv = require("dotenv");
  - dotenv.config({ path: "./config/config.env" });
  
7, npm i nodemon --save dev
  - To seperate errors 
    "scripts": {
       "start": "node app.js",
       "dev": "nodemon app",
       "prod": "SET NODE_ENV=production & nodemon app.js"
    },

8, create 'routes' folder

9, In 'routes' folder create 'jobs.js' file where all jobs route method 
   will be stored

10, in  'jobs.js' file
    - const express = require("express");
    - const router = express.Router();
    - write routes
    - module.exports = router;

11, in 'app.js' file
    - import all job routes : const jobs = require("./routes/jobs"); as
      middleware
    - use jobs route middleware : app.use("/api/v1", jobs); for all job routes
      "/api/v1" will be added automatically.
    - make sure to specify API version "/api/v1" for future API edits
    - test server route in postman app
12, create 'controllers' folder

13, In 'controllers' folder create a 'jobsController.js' file: where all 
    'jobs.js' route definations will be stored 
    - write methods
    - import 'jobsController.js' file in 'jobs.js' file: 
      const { getJobs } = require("../controllers/jobsController");
    - get route defination from '{ getJobs }' :  router.route("/jobs").get(getJobs); or 
      router.get("/jobs", getJobs);

14, Setup postman Environment
    - Add a new Environment with name and setup variebles e.g DOMAIN : http://localhost:3000
    - create a new collection with API name and add description about API
    - Inside collection add a 'jobs' folder and add description about the
      type of API url methods present in 'jobs' folder
    - test url methods
    - save, name and describe request in 'jobs' folder

15, install mongoDB compass (database integration)
    - inside 'config' folder create 'database.js' file
    - inside 'database.js' file:  const mongoose = require("mongoose"); 
      to connect to mongoDB database server
    - inside 'config.env' file: 
      DB_LOCAL_URI = mongodb://localhost:27017/jobs: URI connection
    - inside 'database.js' write 
     'const connectDatabase = () => {mongoose.connect()}' configurations,
      module.exports = connectDatabase;

16, inside 'app.js' const connectDatabase = require('./config/database')
    - connect to database : connectDatabase()

17, open mongoDB compass and make new connection mongodb://localhost:27017/jobs

18, inside 'jobbee-API' folder create 'models' folder for mongoDB database

19, inside 'models' folder create 'job.js' file   
    - const mongoose = require("mongoose");
    - const jobSchema = new mongoose.Schema({})
    - npm install validator  : for input validation
    - npm install slug : used to create readable and SEO-friendly URLs
    - const validator = require("validator");
    - module.exports = mongoose.model("job", jobSchema);

20, inside 'jobsController.js' file 
    - const Job = require('../models/jobs')
    - create a new job route to test model

21, inside 'routes' folder open 'job.js' file
    - router.route("/jobs/new").post(newJob); : to import route method from 
     'jobsController.js' file

22, open postman 
    - insert the POST request url
    - add Headers preset: easily adding headers
    - Navigate to body to add the POST request body
    - in "app.js" file, make sure app.use(express.json());  is ready: for 
    - reading request body
    - make the post request to test request
